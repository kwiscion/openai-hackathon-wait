from agents import Agent, function_tool
from typing_extensions import TypedDict
from openai_hackathon_wait.rag import rag

# PROMPT = (
#     "You are a scientific reviewer. You are given a paper."
#     "Your task is to help the reviewer by providing a feedback on a specific aspect of the paper."
# )
PROMPT = (
    "Answer the question based on the provided context. Try to use provided tools to answer the question."
)

class ReviewerAssistantContext(TypedDict):
    query: str


@function_tool
async def query_rag(query: str):
    """
    Retrieve an answer to a query using a provided RAG (Retriever-Augmented Generation) system.

    This function extracts the 'query' and 'rag' from the provided `params` context,
    and utilizes the RAG system to generate a response to the query.

    Args:
        params (ReviewerAssistantContext): A context object containing the following keys:
            - 'query' (str): The question or prompt to be answered.

    Returns:
        str: The answer generated by the RAG system in response to the query.
    """
    response = await rag.ask_question(query)
    return response


reviewer_assistant_agent = Agent(
    name="ReviewerAssistantAgent",
    instructions=PROMPT,
    model="gpt-4o-mini",
    tools=[query_rag]
)
